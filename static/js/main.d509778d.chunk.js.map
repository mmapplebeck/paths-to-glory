{"version":3,"sources":["app.service.js","Search.js","Sankey.js","App.js","serviceWorker.js","index.js"],"names":["AppService","nodeName","superagent","get","then","res","JSON","parse","text","catch","err","console","log","paths","node","usedNames","Set","previous","nodes","map","p","name","filter","sort","a","b","count","slice","next","n","has","this","getPaths","includes","replace","stripCycleSuffix","transformPaths","query","length","result","toLowerCase","styled","div","input","button","Search","colors","Sankey","data","setNodeName","width","height","chartType","loader","options","sankey","interactivity","nodePadding","label","fontSize","bold","link","colorMode","fillOpacity","chartEvents","eventName","callback","selection","chartWrapper","getChart","getSelection","App","useState","setData","error","setError","isLoading","setIsLoading","useEffect","getDataForNode","response","message","finally","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d509778d.chunk.js","sourcesContent":["import superagent from 'superagent'\n\nconst baseUrl = 'http://10.110.101.254/nodes'\n\nconst cycleSuffix = ' (cycle)'\n\nfunction stripCycleSuffix(nodeName) {\n  return nodeName.includes(cycleSuffix) ? nodeName.replace(cycleSuffix, '') : nodeName\n}\n\nfunction addCycleSuffix(nodeName) {\n  return nodeName + cycleSuffix\n}\n\nclass AppService {\n  // placeholder\n  static getPaths(nodeName) {\n    return superagent\n      .get(`${baseUrl}/${nodeName}/paths`)\n      .then(res => JSON.parse(res.text))\n      .catch(err => {\n        console.log(err)\n      })\n  }\n\n  static transformPaths(paths) {\n    const transformed = [\n      ['From', 'To', 'Count']\n    ]\n    const node = paths.node\n    const usedNames = new Set(paths.previous.nodes.map(p => p.name))\n    const previous = paths.previous.nodes.filter(p => p.name !== node.name).sort((a, b) => b.count - a.count).slice(0, 10).map(p => (\n      [p.name, node.name, p.count]\n    ))\n    const next = paths.next.nodes.filter(n => n.name !== node.name).sort((a, b) => b.count - a.count).slice(0, 10).map(n => (\n      [node.name, usedNames.has(n.name) ? addCycleSuffix(n.name) : n.name, n.count]\n    ))\n    return [...transformed, ...previous, ...next]\n  }\n\n  static getDataForNode(nodeName) {\n    return this.getPaths(stripCycleSuffix(nodeName))\n      .then(paths => this.transformPaths(paths))\n  }\n\n  static getResults(query) {\n    if (query.length < 2) return []\n    const results = [\n      'Demographics',\n      'Visit List',\n      'Summary',\n      'Find Patient'\n    ];\n    return results.filter(result => result.toLowerCase().includes(query.toLowerCase()))\n  }\n}\n\nexport default AppService\n","import React, {useState} from 'react'\nimport styled from 'styled-components'\n\nimport AppService from './app.service'\n\nconst StyledSearch = styled.div`\n  position: relative;\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n  height: 3rem;\n  box-shadow: none;\n  border: 1px solid #758299;\n  margin-bottom: 1rem;\n  border-radius: 3px;\n  font-size: 1rem;\n  padding: 0.5rem;\n\n  ::placeholder {\n    color: #758299;\n  }\n`\n\nconst StyledResults = styled.div`\n  position: absolute;\n  top: calc(3rem + 2px);\n  left: 0;\n  width: 100%;\n  padding: 0.5rem 0;\n  background-color: white;\n  z-index: 1000;\n  border: 1px solid #758299;\n  border-radius: 3px;\n`\n\nconst StyledSearchResult = styled.button`\n  display: block;\n  width: 100%;\n  height: 3rem;\n  font-weight: bold;\n  padding: 1rem;\n  margin: 0;\n  border: 0;\n  font-size: 1rem;\n  text-align: left;\n\n  &:hover {\n    background-color: #f2f2f5;\n    cursor: pointer;\n  }\n`\n\nfunction Search({setNodeName}) {\n  const [query, setQuery] = useState('')\n  const [results, setResults] = useState([])\n  return (\n    <StyledSearch>\n      <StyledInput type=\"text\" value={query} placeholder=\"Find a node\" onChange={e => {\n        setQuery(e.target.value)\n        setResults(AppService.getResults(e.target.value))\n      }} />\n      \n      {results.length > 0 && (\n        <StyledResults>\n          {results.map(result => (\n            <StyledSearchResult key={result} onClick={() => {\n              setNodeName(result)\n              setResults([])\n              setQuery('')\n            }}>{result}</StyledSearchResult>\n          ))}\n        </StyledResults>\n      )}\n    </StyledSearch>\n  );\n}\n\nexport default Search\n","import React from 'react';\nimport Chart from \"react-google-charts\";\n\nconst colors = [\n  '#5051DB',\n  '#05bfe0',\n  '#1463b0',\n  '#33d1bf',\n  '#0a7387',\n  '#33f5f5',\n]\n\nfunction Sankey({data, setNodeName}) {\n  return(\n    <Chart\n      width={'100%'}\n      height={'100%'}\n      chartType=\"Sankey\"\n      loader={<div>Loading Chart</div>}\n      data={data}\n      options={{\n        sankey: {\n          node: {\n            width: 100,\n            interactivity: true,\n            colors,\n            nodePadding: 16,\n            label: {\n              fontSize: 16,\n              bold: true,\n            }\n          },\n          link: {\n            colors,\n            colorMode: 'gradient',\n            fillOpacity: 0.9,\n          }\n        }\n      }}\n      chartEvents={[\n        {\n          eventName: 'select',\n          callback: ({ chartWrapper }) => {\n            const chart = chartWrapper.getChart()\n            const selection = chart.getSelection()\n            if (selection.length === 1) {\n              const [selectedItem] = selection\n              const {name} = selectedItem\n              setNodeName(name)\n            }\n          },\n        }\n      ]}\n    />\n  )\n}\n\nexport default Sankey\n","import React, {useState, useEffect} from 'react';\n\nimport AppService from './app.service'\nimport './App.css'\nimport Search from './Search'\nimport Sankey from './Sankey'\n\nconst colors = [\n  '#5051DB',\n  '#05bfe0',\n  '#1463b0',\n  '#33d1bf',\n  '#0a7387',\n  '#33f5f5',\n]\n\nfunction App() {\n  const [nodeName, setNodeName] = useState('Visit List')\n  const [data, setData] = useState(null)\n  const [error, setError] = useState(null)\n  const [isLoading, setIsLoading] = useState(false)\n\n  useEffect(() => {\n    setIsLoading(true)\n    AppService\n      .getDataForNode(nodeName)\n      .then(response => setData(response))\n      .catch((message => setError(message)))\n      .finally(() => setIsLoading(false))\n  }, [nodeName])\n\n  return (\n    <div className=\"App\">\n      {data && (\n        <>\n          <Sankey data={data} setNodeName={setNodeName} />\n        </>\n      )}\n      {error && (\n        <div>There was an error.</div>\n      )}\n      {isLoading && (\n        <div>Loading...</div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}