{"version":3,"sources":["chart.service.js","App.js","serviceWorker.js","index.js"],"names":["getPaths","nodeName","App","useState","data","setData","query","setQuery","results","setResults","className","type","value","onChange","e","target","length","filter","result","toLowerCase","includes","getResults","map","key","onClick","width","height","chartType","loader","options","sankey","node","interactivity","chartEvents","eventName","callback","selection","chartWrapper","getChart","getSelection","name","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6MAAO,SAASA,EAASC,GACvB,OAAOA,GACL,IAAK,eACH,MAAO,CACL,CAAC,OAAQ,KAAM,UACf,CAAC,aAAc,eAAgB,GAC/B,CAAC,UAAW,eAAgB,GAC5B,CAAC,eAAgB,eAAgB,IAErC,IAAK,aACD,MAAO,CACL,CAAC,OAAQ,KAAM,UACf,CAAC,eAAgB,aAAc,IAErC,IAAK,UACD,MAAO,CACL,CAAC,OAAQ,KAAM,UACf,CAAC,UAAW,eAAgB,GAC5B,CAAC,UAAW,eAAgB,IAElC,IAAK,eACD,MAAO,CACL,CAAC,OAAQ,KAAM,UACf,CAAC,eAAgB,eAAgB,GACjC,CAAC,UAAW,eAAgB,IAElC,QACE,MAAO,ICoCEC,MA1Df,WAAgB,IAAD,EACWC,mBAASH,EAAS,iBAD7B,mBACNI,EADM,KACAC,EADA,OAEaF,mBAAS,IAFtB,mBAENG,EAFM,KAECC,EAFD,OAGiBJ,mBAAS,IAH1B,mBAGNK,EAHM,KAGGC,EAHH,KAIb,OACE,yBAAKC,UAAU,OAAf,SAEE,2BAAOC,KAAK,OAAOC,MAAON,EAAOO,SAAU,SAAAC,GACzCP,EAASO,EAAEC,OAAOH,OAClBH,EDiBD,SAAoBH,GACzB,OAAIA,EAAMU,OAAS,EAAU,GACb,CACd,eACA,aACA,UACA,gBAEaC,QAAO,SAAAC,GAAM,OAAIA,EAAOC,cAAcC,SAASd,EAAMa,kBCzBnDE,CAAWP,EAAEC,OAAOH,WAEhCJ,EAAQQ,OAAS,GAChB,uCAEGR,EAAQc,KAAI,SAAAJ,GAAM,OACjB,6BACE,4BAAQK,IAAKL,EAAQM,QAAS,WAC5BnB,EAAQL,EAASkB,IACjBT,EAAW,IACXF,EAAS,MACPW,QAMZ,kBAAC,IAAD,CACEO,MAAO,IACPC,OAAQ,QACRC,UAAU,SACVC,OAAQ,8CACRxB,KAAMA,EACNyB,QAAS,CACPC,OAAQ,CACNC,KAAM,CACJC,eAAe,KAIrBC,YAAa,CACX,CACEC,UAAW,SACXC,SAAU,YAAuB,IAEzBC,EAFwB,EAAnBC,aACgBC,WACHC,eACxB,GAAyB,IAArBH,EAAUpB,OAAc,CAAC,IAEpBwB,EAFmB,YACHJ,EADG,MAEnBI,KACPnC,EAAQL,EAASwC,YCzCbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.45a1f76e.chunk.js","sourcesContent":["export function getPaths(nodeName) {\n  switch(nodeName) {\n    case 'Demographics':\n      return [\n        ['From', 'To', 'Weight', ],\n        ['Visit List', 'Demographics', 5],\n        ['Summary', 'Demographics', 2],\n        ['Demographics', 'Find Patient', 3],\n      ]\n    case 'Visit List':\n        return [\n          ['From', 'To', 'Weight', ],\n          ['Demographics', 'Visit List', 5],\n        ]\n    case 'Summary':\n        return [\n          ['From', 'To', 'Weight', ],\n          ['Summary', 'Demographics', 2],\n          ['Summary', 'Find Patient', 5]\n        ]\n    case 'Find Patient':\n        return [\n          ['From', 'To', 'Weight', ],\n          ['Demographics', 'Find Patient', 3],\n          ['Summary', 'Find Patient', 5]\n        ]\n    default:\n      return []\n  }\n}\n\nexport function getResults(query) {\n  if (query.length < 2) return []\n  const results = [\n    'Demographics',\n    'Visit List',\n    'Summary',\n    'Find Patient'\n  ];\n  return results.filter(result => result.toLowerCase().includes(query.toLowerCase()))\n}","import React, {useState} from 'react';\nimport Chart from \"react-google-charts\";\n\nimport {getPaths, getResults} from './chart.service'\n\nfunction App() {\n  const [data, setData] = useState(getPaths('Demographics'))\n  const [query, setQuery] = useState('')\n  const [results, setResults] = useState([])\n  return (\n    <div className=\"App\">\n      Search\n      <input type=\"text\" value={query} onChange={e => {\n        setQuery(e.target.value)\n        setResults(getResults(e.target.value))\n      }} />\n      {results.length > 0 && (\n        <div>\n          Results\n          {results.map(result => (\n            <div>\n              <button key={result} onClick={() => {\n                setData(getPaths(result))\n                setResults([])\n                setQuery('')\n              }}>{result}</button>\n            </div>\n          ))}\n        </div>\n      )}\n      \n      <Chart\n        width={600}\n        height={'300px'}\n        chartType=\"Sankey\"\n        loader={<div>Loading Chart</div>}\n        data={data}\n        options={{\n          sankey: {\n            node: {\n              interactivity: true\n            }\n          }\n        }}\n        chartEvents={[\n          {\n            eventName: 'select',\n            callback: ({ chartWrapper }) => {\n              const chart = chartWrapper.getChart()\n              const selection = chart.getSelection()\n              if (selection.length === 1) {\n                const [selectedItem] = selection\n                const {name} = selectedItem\n                setData(getPaths(name))\n              }\n            },\n          }\n        ]}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}